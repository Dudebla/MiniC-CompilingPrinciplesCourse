* MiniC Compilation to CM Code
* File: C:/Users/Pietra/Desktop/sample1.cm
* Standard prelude:
  0:     LD  6,0(0) 	load gp with maxaddress
  1:    LDC  5,0(0) 	copy gp to mp
  2:     ST  0,0(0) 	clear location 0
* End of standard prelude.
* -> funDcl (gcd)
  4:     ST  1,2(5) 	func: store the location of func. entry
* func: uncondition jump to next declaration belongs here
* func: function body starts here
  3:    LDC  1,6(0) 	func: load function location
  6:     ST  0,-1(6) 	func: store return address
* -> param (u)
* <- param
* -> param (v)
* <- param
* -> Compnd
* -> if
* -> Op
* -> Id (v)
  7:    LDA  1,0(6) 	
  8:    LDC  0,-3(0) 	id: load varOffset
  9:    ADD  0,6,0 	id: calculate the address
 10:     LD  0,0(0) 	load id value
* <- Id
 11:     ST  0,-4(6) 	op: push left
* -> Const
 12:    LDC  0,0(0) 	load const
* <- Const
 13:     LD  1,-4(6) 	op: load left
 14:    SUB  0,1,0 	op ==
 15:    JEQ  0,2(7) 	br if true
 16:    LDC  0,0(0) 	false case
 17:    LDA  7,1(7) 	unconditional jmp
 18:    LDC  0,1(0) 	true case
* <- Op
* if: jump to else belongs here
* -> return
* -> Id (u)
 20:    LDA  1,0(6) 	
 21:    LDC  0,-2(0) 	id: load varOffset
 22:    ADD  0,6,0 	id: calculate the address
 23:     LD  0,0(0) 	load id value
* <- Id
 24:     LD  7,-1(6) 	return: to caller
* <- return
* if: jump to end belongs here
 19:    JEQ  0,6(7) 	if: jmp to else
* -> return
* -> call
* -> args
* -> Id (v)
 26:    LDA  1,0(6) 	
 27:    LDC  0,-3(0) 	id: load varOffset
 28:    ADD  0,6,0 	id: calculate the address
 29:     LD  0,0(0) 	load id value
* <- Id
 30:     ST  0,-6(6) 	call: push argument
* -> Op
* -> Id (u)
 31:    LDA  1,0(6) 	
 32:    LDC  0,-2(0) 	id: load varOffset
 33:    ADD  0,6,0 	id: calculate the address
 34:     LD  0,0(0) 	load id value
* <- Id
 35:     ST  0,-4(6) 	op: push left
* -> Op
* -> Op
* -> Id (u)
 36:    LDA  1,0(6) 	
 37:    LDC  0,-2(0) 	id: load varOffset
 38:    ADD  0,6,0 	id: calculate the address
 39:     LD  0,0(0) 	load id value
* <- Id
 40:     ST  0,-5(6) 	op: push left
* -> Id (v)
 41:    LDA  1,0(6) 	
 42:    LDC  0,-3(0) 	id: load varOffset
 43:    ADD  0,6,0 	id: calculate the address
 44:     LD  0,0(0) 	load id value
* <- Id
 45:     LD  1,-5(6) 	op: load left
 46:    DIV  0,1,0 	op /
* <- Op
 47:     ST  0,-5(6) 	op: push left
* -> Id (v)
 48:    LDA  1,0(6) 	
 49:    LDC  0,-3(0) 	id: load varOffset
 50:    ADD  0,6,0 	id: calculate the address
 51:     LD  0,0(0) 	load id value
* <- Id
 52:     LD  1,-5(6) 	op: load left
 53:    MUL  0,1,0 	op *
* <- Op
 54:     LD  1,-4(6) 	op: load left
 55:    SUB  0,1,0 	op -
* <- Op
 56:     ST  0,-7(6) 	call: push argument
* <- args
 57:     ST  6,-4(6) 	call: store current mp
 58:    LDA  6,-4(6) 	call: push new frame
 59:    LDA  0,1(7) 	call: save return in ac
 60:     LD  7,2(5) 	call: relative jump to function entry
 61:     LD  6,0(6) 	call: pop current frame
* <- call
 62:     LD  7,-1(6) 	return: to caller
* <- return
 25:    LDA  7,37(7) 	jmp to end
* <- if
* <- Compnd
 63:     LD  7,-1(6) 	fun: load pc with return address
  5:    LDA  7,58(7) 	func: uncondiction jump to next declaration
* <- funDcl (gcd)
* -> funDcl (main)
 65:     ST  1,3(5) 	func: store the location of func. entry
* func: uncondition jump to next declaration belongs here
* func: function body starts here
 64:    LDC  1,67(0) 	func: load function location
 67:     ST  0,-1(6) 	func: store return address
* -> Compnd
* -> assign
* -> Id (x)
 68:    LDA  1,0(6) 	
 69:    LDC  0,-2(0) 	id: load varOffset
 70:    ADD  0,6,0 	id: calculate the address
 71:    LDA  0,0(0) 	load id address
* <- Id
 72:     ST  0,-4(6) 	assign: push left(address)
* -> call
 73:     IN  0,0,0 	read integer value
* <- call
 74:     LD  1,-4(6) 	assign: load left(value)
 75:     ST  0,0(1) 	assign: store value
* <- assign
* -> assign
* -> Id (y)
 76:    LDA  1,0(6) 	
 77:    LDC  0,-3(0) 	id: load varOffset
 78:    ADD  0,6,0 	id: calculate the address
 79:    LDA  0,0(0) 	load id address
* <- Id
 80:     ST  0,-4(6) 	assign: push left(address)
* -> call
 81:     IN  0,0,0 	read integer value
* <- call
 82:     LD  1,-4(6) 	assign: load left(value)
 83:     ST  0,0(1) 	assign: store value
* <- assign
* -> call
* -> args
* -> call
* -> args
* -> Id (x)
 84:    LDA  1,0(6) 	
 85:    LDC  0,-2(0) 	id: load varOffset
 86:    ADD  0,6,0 	id: calculate the address
 87:     LD  0,0(0) 	load id value
* <- Id
 88:     ST  0,-6(6) 	call: push argument
* -> Id (y)
 89:    LDA  1,0(6) 	
 90:    LDC  0,-3(0) 	id: load varOffset
 91:    ADD  0,6,0 	id: calculate the address
 92:     LD  0,0(0) 	load id value
* <- Id
 93:     ST  0,-7(6) 	call: push argument
* <- args
 94:     ST  6,-4(6) 	call: store current mp
 95:    LDA  6,-4(6) 	call: push new frame
 96:    LDA  0,1(7) 	call: save return in ac
 97:     LD  7,2(5) 	call: relative jump to function entry
 98:     LD  6,0(6) 	call: pop current frame
* <- call
 99:     ST  0,-6(6) 	call: push argument
* <- args
100:     LD  0,-6(6) 	load arg to ac
101:    OUT  0,0,0 	write ac
* <- call
* <- Compnd
102:     LD  7,-1(6) 	fun: load pc with return address
 66:    LDA  7,36(7) 	func: uncondiction jump to next declaration
* <- funDcl (main)
103:    LDC  0,-2(0) 	init: load globalOffset
104:    ADD  6,6,0 	init: initialize mp with globalOffset
* -> Call
105:     ST  6,0(6) 	call: store current mp
106:    LDA  6,0(6) 	call: push new frame
107:    LDA  0,1(7) 	call: save return in ac
108:    LDC  7,67(0) 	call: unconditional jump to main() entry
109:     LD  6,0(6) 	call: pop current frame
* <- Call
* End of execution.
110:   HALT  0,0,0 	
